version: '3.9'

# TODO: use .env file volume stuff
# TODO: use .env file config for environment sections
# TODO: define exact commit hashes
# TODO: do we need secrets/should we be using swarm mode?
# TODO: add a postgres backup container probably?
# TODO: need to add more volumes for postgres (logs etc)?
# TODO: perfect forward secrecy?

services:
  postgres:
    container_name: primal-kitchen-postgres
    image: postgres
    volumes:
      - ./data/postgres-volume:/var/lib/postgresql/data
    env_file: .env
    networks:
      - primal-kitchen-backend-network
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    # fix a volume permissions issue
    command: postgres -c stats_temp_directory=/tmp

  strapi:
    container_name: primal-kitchen-strapi
    image: ${APP_CONTAINER_REGISTRY}/strapi
    build:
      context: strapi
    env_file:
       - .env
      # - strapi/.env
    expose:
      - ${STRAPI_PORT}
    environment:
      DATABASE_CLIENT: postgres
      # must match name of service i think.. how does this work?
      DATABASE_HOST: postgres
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_NAME: ${POSTGRES_DATABASE}
      DATABASE_USERNAME: ${POSTGRES_USERNAME}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_SSL: ${POSTGRES_USING_SSL}
      PORT: ${STRAPI_PORT}
      HOST: ${STRAPI_HOST_URL}
      URL: https://${STRAPI_SUBDOMAIN}.${APP_DOMAIN}
      ADMIN_JWT_SECRET: ${STRAPI_ADMIN_JWT_SECRET}
      STRAPI_LOG_LEVEL: trace
    networks:
      - primal-kitchen-backend-network
    depends_on:
      - postgres

  redis:
    container_name: primal-kitchen-redis
    image: redis
    environment:
      # TODO: ... we need a password ...
      ALLOW_EMPTY_PASSWORD: 'yes'
    networks:
      - primal-kitchen-backend-network

  minio:
    container_name: primal-kitchen-minio
    image: minio/minio:RELEASE.2022-01-04T07-41-07Z.fips
    networks:
      - primal-kitchen-backend-network
    volumes:
      - ./data/minio-volume:/data
    command: server /data --address ":${MINIO_PORT}"
    hostname: ${MINIO_HOSTNAME}
    env_file: .env

  medusa:
    container_name: ${MEDUSA_STOREFRONT_CONTAINER_NAME}
    image: ${APP_CONTAINER_REGISTRY}/medusa
    build:
      context: medusa
    environment:
      ADMIN_CORS: https://${MEDUSA_ADMIN_PANEL_SUBDOMAIN}.${APP_DOMAIN} # think this needs to be only http...
      STORE_CORS: https://${APP_DOMAIN}
      DATABASE_URL: postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}
      DATABASE_TYPE: ${POSTGRES_HOST}
      REDIS_URL: redis://redis:${REDIS_PORT}
      STRIPE_API_KEY: ''
      STRIPE_WEBHOOK_SECRET: ''
      COOKIE_SECRET: ${MEDUSA_STOREFRONT_COOKIE_SECRET}
      JWT_SECRET: ${MEDUSA_STOREFRONT_JWT_SECRET}
      # TODO: check actually need to declare all
      STRAPI_URL: https://${STRAPI_SUBDOMAIN}.${APP_DOMAIN}
      STRAPI_PORT: ${STRAPI_PORT}
      STRAPI_USERNAME: ${STRAPI_USERNAME}
      STRAPI_PASSWORD: ${STRAPI_PASSWORD}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_SUBDOMNAIN: ${MINIO_SUBDOMAIN}
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_ENDPOINT: ${MINIO_SUBDOMAIN}.${APP_DOMAIN}
    networks:
      - primal-kitchen-backend-network
    depends_on:
      - minio
      - postgres
      - strapi
      - redis

  medusa-admin:
    container_name: ${MEDUSA_ADMIN_PANEL_CONTAINER_NAME}
    image: ${APP_CONTAINER_REGISTRY}/medusa-admin
    build:
      context: medusa-admin
      args:
        # TODO: this is bad we want env not arg
        GATSBY_MEDUSA_BACKEND_URL: https://${MEDUSA_STOREFRONT_SUBDOMAIN}.${APP_DOMAIN}
    networks:
      - primal-kitchen-backend-network
    depends_on:
      - medusa

  frontend:
    container_name: ${FRONTEND_CONTAINER_NAME}
    image: ${APP_CONTAINER_REGISTRY}/frontend
    build:
      context: frontend
    networks:
      - primal-kitchen-backend-network
    depends_on:
      - strapi
      - medusa

  # TODO: look into if we need to "warm up" nginx as first load can be really slow...
  reverse-proxy:
    container_name: primal-kitchen-reverse-proxy
    image: ${APP_CONTAINER_REGISTRY}/reverse-proxy
    env_file: .env
    build:
      context: reverse-proxy
    volumes:
      - ./data/certbot/www/:${NGINX_WEBROOT}:ro
      - ./data/certbot/conf/:/etc/nginx/ssl/:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - primal-kitchen-backend-network
    depends_on:
      - strapi
      - medusa
      - medusa-admin
      - frontend

networks:
  primal-kitchen-backend-network:
    driver: bridge
