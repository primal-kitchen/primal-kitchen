version: '3.9'

# TODO: use .env file volume stuff
# TODO: use .env file config for environment sections
# TODO: define exact commit hashes
# TODO: do we need secrets/should we be using swarm mode?
# TODO: add a postgres backup container probably?
# TODO: need to add more volumes for postgres (logs etc)?
# TODO: perfect forward secrecy?

services:
  postgres:
    container_name: primal-kitchen-postgres
    image: postgres
    volumes:
      - ./data/postgres-volume:/var/lib/postgresql/data
    env_file: .env
    networks:
      - primal-kitchen-backend-network
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_DB: ${POSTGRES_DATABASE}

  strapi:
    container_name: primal-kitchen-strapi
    image: ${CONTAINER_REGISTRY}/strapi
    build:
      context: strapi
      dockerfile: Dockerfile
    env_file:
       - .env
      # - strapi/.env
    environment:
      DATABASE_CLIENT: postgres
      # must match name of service i think.. how does this work?
      DATABASE_HOST: postgres
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_NAME: ${POSTGRES_DATABASE}
      DATABASE_USERNAME: ${POSTGRES_USERNAME}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_SSL: ${POSTGRES_USING_SSL}
      PORT: ${STRAPI_PORT}
      HOST: ${STRAPI_HOST_URL}
      ADMIN_JWT_SECRET: ${STRAPI_ADMIN_JWT_SECRET}
    networks:
      - primal-kitchen-backend-network
    depends_on:
      - postgres

  redis:
    container_name: primal-kitchen-redis
    image: redis
    environment:
      # TODO: ... we need a password ...
      ALLOW_EMPTY_PASSWORD: 'yes'
    networks:
      - primal-kitchen-backend-network

  medusa:
    container_name: primal-kitchen-medusa
    image: ${CONTAINER_REGISTRY}/medusa
    build:
      context: medusa
    environment:
      ADMIN_CORS: 'http://localhost:7000'
      STORE_CORS: ''
      DATABASE_URL: postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}
      REDIS_URL: redis://localhost:${REDIS_PORT}
      STRIPE_API_KEY: ''
      STRIPE_WEBHOOK_SECRET: ''
    networks:
      - primal-kitchen-backend-network
    depends_on:
      - postgres
      - strapi
      - redis

  medusa-admin:
    container_name: ${MEDUSA_ADMIN_PANEL_CONTAINER_NAME}
    image: ${CONTAINER_REGISTRY}/medusa-admin
    build:
      context: medusa-admin
      dockerfile: ../medusa-admin.dockerfile
    networks:
      - primal-kitchen-backend-network
    depends_on:
      - medusa

  frontend:
    container_name: ${FRONTEND_CONTAINER_NAME}
    image: ${CONTAINER_REGISTRY}/frontend
    build:
      context: frontend
    networks:
      - primal-kitchen-backend-network
    depends_on:
      - strapi
      - medusa

  # TODO: look into if we need to "warm up" nginx as first load can be really slow...
  reverse-proxy:
    container_name: primal-kitchen-reverse-proxy
    image: ${CONTAINER_REGISTRY}/reverse-proxy
    env_file: .env
    build:
      context: reverse-proxy
    volumes:
      - ./data/certbot/www/:${NGINX_WEBROOT}:ro
      - ./data/certbot/conf/:/etc/nginx/ssl/:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - primal-kitchen-backend-network
    depends_on:
      - strapi
      - medusa
      - medusa-admin
      - frontend

  certbot:
    container_name: primal-kitchen-certbot
    image: certbot/certbot
    env_file: .env
    volumes:
      - ./data/certbot/www/:${NGINX_WEBROOT}:rw
      - ./data/certbot/conf/:/etc/letsencrypt/:rw
      - ./data/log/letsencrypt/:/var/log/letsencrypt/
    depends_on:
      - reverse-proxy
    command: certonly --webroot --webroot-path ${NGINX_WEBROOT} --dry-run --email ${DEVELOPER_EMAIL} --agree-tos --no-eff-email --staging -d ${APP_DOMAIN}

networks:
  primal-kitchen-backend-network:
    driver: bridge
